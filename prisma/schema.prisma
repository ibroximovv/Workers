// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id        String   @id @default(uuid())
  name_uz   String   @unique
  name_ru   String?  @unique
  name_en   String?  @unique
  User      User[]
  createdAt DateTime @default(now())
}

model User {
  id         String       @id @default(uuid())
  fullname   String
  phone      String       @unique
  email      String       @unique
  password   String
  Region     Region       @relation(fields: [regionId], references: [id])
  regionId   String
  role       UserRole     @default(USER_FIZ)
  inn        String?
  mfo        String?
  bank       String?
  rc         String?
  oked       String?
  address    String?
  Session    Session[]
  createdAt  DateTime     @default(now())
  Order      Order[]
  Backet     Backet[]
  Star       Star[]
  Comment    Comment[]
  BacketItem BacketItem[]
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  VIEWER_ADMIN
  USER_FIZ
  USER_YUR
}

model Session {
  id        String   @id @default(uuid())
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  userIp    String
  device    String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Master {
  id            String  @id @default(uuid())
  fullName      String  @unique
  phone         String  @unique
  isActive      Boolean @default(true)
  year          Int
  image         String
  passportImage String
  about         String

  Star          Star[]
  createdAt     DateTime        @default(now())
  MasterOrder   MasterOrder[]
  ProductMaster ProductMaster[]
}

//
model Star {
  id        String   @id @default(uuid())
  Master    Master   @relation(fields: [masterId], references: [id])
  masterId  String
  User      User     @relation(fields: [userId], references: [id])
  star      Float
  createdAt DateTime @default(now())
  userId    String
}

model Comment {
  id        String   @id @default(uuid())
  Order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  createdAt DateTime @default(now())
}

model GeneralInfo {
  id         String   @id @default(uuid())
  email      String?   @unique
  links      String?   @unique
  phones     String?   @unique
  telegramId String?  @unique
  createdAt  DateTime @default(now())
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  surName   String
  phone     String
  address   String
  message   String
  createdAt DateTime @default(now())
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model Showcase {
  id             String   @id @default(uuid())
  name_uz        String   @unique
  name_ru        String?  @unique
  name_en        String?  @unique
  description_uz String   @unique
  description_ru String?  @unique
  description_en String?  @unique
  image          String?
  link           String?
  createdAt      DateTime @default(now())
}

model Partners {
  id        String   @id @default(uuid())
  name_uz   String   @unique
  name_ru   String?  @unique
  name_en   String?  @unique
  image     String?
  link      String?
  createdAt DateTime @default(now())
}

model Level {
  id      String  @id @default(uuid())
  name_uz String  @unique
  name_ru String? @unique
  name_en String? @unique

  ProductLevel  ProductLevel[]
  ProductOrder  ProductOrder[]
  ProductMaster ProductMaster[]
  createdAt     DateTime        @default(now())
  BacketItem    BacketItem[]
}

model Capasity {
  id        String   @id @default(uuid())
  name_uz   String   @unique
  name_ru   String?  @unique
  name_en   String?  @unique
  Tool      Tool[]
  createdAt DateTime @default(now())
}

model Brand {
  id        String   @id @default(uuid())
  name_uz   String   @unique
  name_ru   String?  @unique
  name_en   String?  @unique
  Tool      Tool[]
  createdAt DateTime @default(now())
}

//
model Tool {
  id             String        @id @default(uuid())
  name_uz        String
  name_ru        String?
  name_en        String?
  description_uz String
  description_ru String?
  description_en String?
  price          Int
  quantity       Int
  code           String
  Brand          Brand         @relation(fields: [brandId], references: [id])
  brandId        String
  isActive       Boolean       @default(true)
  Capacity       Capasity?     @relation(fields: [capasityId], references: [id])
  capasityId     String?
  image          String
  Size           Size?         @relation(fields: [sizeId], references: [id])
  sizeId         String?
  ProductTool    ProductTool[]
  createdAt      DateTime      @default(now())
  ToolOrder      ToolOrder[]
  BacketItem     BacketItem[]
}

model Product {
  id              String         @id @default(uuid())
  name_uz         String         @unique
  name_ru         String?        @unique
  name_en         String?        @unique
  isActive        Boolean        @default(true)
  image           String
  minWorkingHours Int
  ProductLevel    ProductLevel[]

  ProductTool      ProductTool[]
  createdAt        DateTime           @default(now())
  ProductMaster    ProductMaster[]
  ProductOrder     ProductOrder[]
  ProductOrderTool ProductOrderTool[]
  BacketItem       BacketItem[]
}

// priceHourly     Int
// priceDaily      Int

model ProductLevel {
  id              String   @id @default(uuid())
  Product         Product  @relation(fields: [productId], references: [id])
  productId       String
  Level           Level    @relation(fields: [levelId], references: [id])
  levelId         String
  priceHourly     Int
  priceDaily      Int
  minWorkingHours Int
  createdAt       DateTime @default(now())
}

model ProductTool {
  id        String   @id @default(uuid())
  Product   Product  @relation(fields: [productId], references: [id])
  productId String
  Tool      Tool     @relation(fields: [toolId], references: [id])
  toolId    String
  createdAt DateTime @default(now())
}

model Size {
  id        String   @id @default(uuid())
  name_uz   String   @unique
  name_ru   String?  @unique
  name_en   String?  @unique
  Tool      Tool[]
  createdAt DateTime @default(now())
}

model ProductMaster {
  id              String  @id @default(uuid())
  Product         Product @relation(fields: [productId], references: [id])
  productId       String
  Master          Master  @relation(fields: [masterId], references: [id])
  masterId        String
  minWorkingHours Int
  level           Level   @relation(fields: [levelId], references: [id])
  levelId         String
  priceHourly     Int
  priceDaily      Int
  experience      Int
}

model Order {
  id                String         @id @default(uuid())
  ToolOrder         ToolOrder[]
  ProductOrder      ProductOrder[]
  total             Int
  location          Json
  address           String
  date              DateTime       @default(now())
  paymentType       PaymentType
  withDelivery      Boolean        @default(true)
  status            OrderStatus    @default(PANDING)
  commentToDelivery String?
  cardNumber        String?
  cardDate          String?
  MasterOrder       MasterOrder[]
  Comment           Comment[]
  User              User           @relation(fields: [userId], references: [id])
  userId            String
  Backet            Backet[]
}

enum PaymentType {
  CARD
  CASH
}

enum OrderStatus {
  PANDING
  VOID
  PAID
  FINISHED
}

model ProductOrder {
  id               String             @id @default(uuid())
  Product          Product            @relation(fields: [productId], references: [id])
  productId        String
  Order            Order              @relation(fields: [orderId], references: [id])
  orderId          String
  count            Int
  total            Int
  level            Level              @relation(fields: [levelId], references: [id])
  levelId          String
  quantity         Int
  ProductOrderTool ProductOrderTool[]
  measure          Measure
}

enum Measure {
  HOUR
  DAY
}

model ProductOrderTool {
  id             String       @id @default(uuid())
  Product        Product      @relation(fields: [productId], references: [id])
  productId      String
  ProductOrder   ProductOrder @relation(fields: [productOrderId], references: [id])
  productOrderId String
}

model ToolOrder {
  id      String @id @default(uuid())
  Tool    Tool   @relation(fields: [toolId], references: [id])
  toolId  String
  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String
  total   Int
  count   Int
}

model MasterOrder {
  id       String @id @default(uuid())
  Master   Master @relation(fields: [masterId], references: [id])
  masterId String
  Order    Order  @relation(fields: [orderId], references: [id])
  orderId  String
}

model Backet {
  id      String @id @default(uuid())
  User    User   @relation(fields: [userId], references: [id])
  userId  String
  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}

model BacketItem {
  id        String   @id @default(uuid())
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  Level     Level?   @relation(fields: [levelId], references: [id])
  levelId   String?
  Tool      Tool?    @relation(fields: [toolId], references: [id])
  toolId    String?
  quantity  Int
  total     Int
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}
